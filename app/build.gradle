buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath paths.fabricClassPath
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

// Singing configs
def STORE_FILE, KEY_ALIAS, STORE_PASSWORD, KEY_PASSWORD
// Apply customization or use default
File localConfig = file('local/config.properties')
if (localConfig.exists()) {
    Properties configProperties = new Properties()
    configProperties.load(new FileInputStream(localConfig))

    STORE_FILE = 'local/keystore.jks'
    KEY_ALIAS = configProperties['KEY_ALIAS']
    STORE_PASSWORD = configProperties['KEY_STORE_PASSWORD']
    KEY_PASSWORD = configProperties['KEY_PASSWORD']
} else {
    STORE_FILE = 'debug.keystore'
    KEY_ALIAS = 'androiddebugkey'
    STORE_PASSWORD = 'android'
    KEY_PASSWORD = 'android'
}

// Only enable fabric kits when fabric.properties if configured properly
boolean FABRIC_ENABLED = false
if (file('fabric.properties').exists()) {
    FABRIC_ENABLED = true
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--all', '--count'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim()) + 19042401
    } catch (ignored) {
        return -1
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (ignored) {
        return null
    }
}

android {
    compileSdkVersion "$rootProject.compileSdkVersion".toInteger()
    buildToolsVersion "$rootProject.buildToolsVersion"

    defaultConfig {
        applicationId 'io.github.ryanhoo.firFlight'
        minSdkVersion "$rootProject.minSdkVersion".toInteger()
        targetSdkVersion "$rootProject.targetSdkVersion".toInteger()
        versionCode getVersionCode()
        versionName getVersionName()
    }

    signingConfigs {
        release {
            storeFile file("$STORE_FILE")
            keyAlias "$KEY_ALIAS"
            storePassword "$STORE_PASSWORD"
            keyPassword "$KEY_PASSWORD"
        }
    }

    lintOptions {
        disable 'GoogleAppIndexingWarning'
        disable 'InvalidPackage'
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res-common-dialog/',
                    'src/main/res/'
            ]
        }
    }

    buildTypes {
        debug {
            versionNameSuffix '(D)'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "fir.flight_${getVersionName}_${variant.name}.apk"
        }
    }


    productFlavors.all { flavor ->
        manifestPlaceholders.put('flightFlavorName', flavor.name)
        // Unnecessary, there already has a FLAVOR in BuildConfig
        // flavor.buildConfigField('String', 'FLAVOR_NAME', "\"${flavor.name}\"")

        // Fabric
        ext.enableCrashlytics = FABRIC_ENABLED
        flavor.buildConfigField("boolean", "FABRIC_ENABLED", "$FABRIC_ENABLED")
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation libs.junit

    implementation libs.support_v4
    implementation libs.appcompat_v7
    implementation libs.material_design
    implementation libs.recyclerview_v7
    implementation libs.cardview_v7
    implementation libs.customtabs

    implementation libs.rxjava
    implementation libs.rxandroid

    implementation libs.glide

    implementation libs.butterknife
    annotationProcessor libs.butterknifeProcessor

    implementation libs.gson

    implementation libs.retrofit2
    implementation libs.retrofit2GsonConverter
    implementation libs.retrofit2RxJavaAdapter

    implementation libs.sqlbrite

    implementation(libs.crashlytics) { transitive = true }
    implementation(libs.answers) { transitive = true }

    implementation libs.stetho
    implementation libs.stetho_okhttp
    implementation libs.stetho_jsconsole

    implementation libs.calligraphy
}
